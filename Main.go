package main

import (
	"fmt"
	mtd "main/methods"
)

func main() {
	// Описание входной системы уравнений
	// 1)
	A := [][]float64{
		{3, -0.1},
		{0.1, 7}}
	B := []float64{7.85, -19.3}

	// 2)
	// A := [][]float64{
	// 	{1, 1, -1},
	// 	{2, 3, -1},
	// 	{1, 2, 1}}
	// B := []float64{-2, 7, 3}

	// 3)
	// A := [][]float64{
	// 	{2, -4, -1, 0},
	// 	{7, -5, 1, 3},
	// 	{8, 7, 4, -1},
	// 	{1, 1, 1, 1}}
	// B := []float64{0.04, -7, 15, 28}

	// 4)
	// A := [][]float64{
	// 	{5, 2, 1, 1, -1},
	// 	{2, -6, 2, 1, 1},
	// 	{1, 2, -5, 1, 1},
	// 	{1, 1, 2, 4, 1},
	// 	{1, -1, 1, 2, 5}}
	// B := []float64{-3, 8, 5, -4, 7}

	// Задание метода
	// "G" - Метод Гаусса
	// "I" - Метод итераций
	// "S" - Мето Зейделя
	method := "S"

	// Вектор решения
	var x []float64

	if method == "G" {
		// Решение методом Гаусса
		x = mtd.Gauss(A, B)

		// Вывод решения
		fmt.Printf("Решение: %v\r\n", x)
	} else {
		// Нулевые приближения
		X0 := make([]float64, len(A))
		// Точность
		eps := 0.001
		// Начальное значение итераций
		i := 0

		if method == "I" {
			// Solve the system using Iterations' method
			x, i = mtd.Iteration(A, B, X0, eps)
		} else {
			// Решение методом Зейделя
			x, i = mtd.Seidel(A, B, X0, eps)
		}

		// Вывод решения
		if i > 0 {
			fmt.Printf("Решение: %v\r\n Итерации: %d", x, i)
		}
	}
}
